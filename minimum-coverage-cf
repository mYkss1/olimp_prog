// Минимальное покрытие
//
// На прямой задано некоторое множество отрезков с целочисленными координатами концов [Li,Ri].
//Выберите среди данного множества подмножество отрезков, целиком покрывающее отрезок [0,M], (M — натуральное число), содержащее наименьшее число отрезков.
// 
// Входные данные:
// 
// В первой строке указана константа M(1⩽M⩽5000).
// В каждой последующей строке записана пара чисел Li и Ri(| Li | , | Ri | ⩽50000), задающая координаты левого и правого концов отрезков.Список завершается парой нулей.
// Общее число отрезков не превышает 100000
//
// Выходные данные:
//
// В первой строке выходного файла выведите минимальное число отрезков, необходимое для покрытия отрезка[0, M]
// Далее выведите список покрывающего подмножества, упорядоченный по возрастанию координат левых концов отрезков.Список отрезков выводится в том же формате, что и во входe. Завершающие два нуля выводить не нужно.
// Если покрытие отрезка[0, M] исходным множеством отрезков[Li, Ri] невозможно, то следует вывести единственную фразу "No solution".
//
// |input:             |output:
// |-------------------|--------            
// |1                  | No solution
// |-1 0               |
// |-5 -3            
// |2 5
// |0 0
//
// |input:             |output:
// |-------------------|--------
// |1                  | 1
// |-1 0               | 0 1
// |0 1
// |0 0



#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <fstream>
#include <deque>
#include <queue>
#include <cmath>
#define long long ll;

using namespace std;

const int ADD = 50000;
const int N = 100000;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    /*ifstream cin("input.txt");
    ofstream cout("output.txt"); */
    int m;
    cin >> m;
    vector <pair<int, int>> seg;
    int l, r;
    vector<int> max_r(N);
    while (cin >> l >> r) {
        if (l == 0 && r == 0) {
            break;
        }
        l += ADD;
        r += ADD;
        seg.push_back({ l, r });
        max_r[l] = max(max_r[l], r);
    }
    int pos = ADD;
    l = 0;
    r = 0;
    vector <pair<int, int>> ans;
    for (int x = 0; x < m + ADD; ++x) {
        if (max_r[x] > pos && x <= pos) {
            if (max_r[x] > r) {
                r = max_r[x];
                l = x;
            }
        }
        if (pos == x) {
            if (r > pos) {
                ans.push_back({ l, r });
                pos = r;
            }
            else {
                cout << "No solution";
                return 0;
            }
        }
    }
    cout << ans.size() << '\n';
    for (auto [l, r] : ans) {
        cout << l - ADD << ' ' << r - ADD << '\n';
    }
    return 0;
}
